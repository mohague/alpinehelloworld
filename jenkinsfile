pipeline {
    agent none  
    environment {
        PORT_EXPOSED = "80"
        DOCKERHUB_AUTH = credentials('DOCKERHUB_AUTH')
        ID_DOCKER = "${DOCKERHUB_AUTH_USR}"

     }

    stages {
        stage('Build Image') {
            agent any
            steps {
                script {
                    sh 'docker build -t ${ID_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG} .'
                }
            }
        }

        
        stage('Run container based on builded image') {
            agent any
            steps {
                script {
                    sh '''
                        echo "Cleaning Environment"
                        docker rm -f ${IMAGE_NAME} || echo "Container does not exist"
                        docker run -d -p 80:5000 -e PORT=5000 --name ${IMAGE_NAME} ${IMAGE_NAME}:${IMAGE_TAG} 
                        sleep 5
                    '''
                }
            }
        }


        stage('Unit Tests') {
            agent any
            steps {
                script {
                    sh 'docker exec ${IMAGE_NAME} /bin/bash -c python tests.py'
                }
            }
        }

        stage('Fonctional Tests') {
            agent any
            steps {
                script {
                    sh 'curl http://172.17.0.1:${PORT_EXPOSED} | grep -q "Hello world!"'
                }
            }
        }

        
        stage('Clean Container') {
            agent any
            steps {
                script {
                    sh '''
                        docker stop ${IMAGE_NAME}
                        docker rm  ${IMAGE_NAME}
                    '''
                }
            }
        }


        stage ('Release') {
            agent any            
            steps {
                script {
                sh '''
                    echo ${DOCKERHUB_AUTH_PSW} | docker login -u ${DOCKERHUB_AUTH_USR} --password-stdin
                    docker push ${ID_DOCKER}/${IMAGE_NAME}:${IMAGE_TAG}
                '''
                }
            }
        }

        stage ('Deploy in staging') {
            agent any
            when {
                expression { GIT_BRANCH == 'origin/master' }
            }
            environment { 
                HOSTNAME_DEPLOY_STAGING = '3.86.62.154'
                }            
            steps {
                sshagent(credentials: ['SSH_AUTH_SERVER']) {
                    sh '''
                        [ -d ~/.ssh ] || mkdir ~/.ssh && chmod 0700 ~/.ssh
                        ssh-keyscan -t rsa,dsa ${HOSTNAME_DEPLOY_STAGING} >> ~/.ssh/known_hosts
                        command1="echo ${DOCKERHUB_PASSWORD_PSW} docker login -u ${DOCKERHUB_AUTH_USR} --password-stdin"
                        command2="docker pull ${DOCKERHUB_AUTH_USR}/${IMAGE_NAME}:${IMAGE_TAG}"
                        command3="dokcer rm -f ${IMAGE_NAME} || echo 'app does not exist'"
                        command4="docker run -d -p 80:5000 -e PORT=5000 --name ${IMAGE_NAME} ${IMAGE_NAME}:${IMAGE_TAG}"
                        ssh -t centos@${HOSTNAME_DEPLOY_STAGING} \
                            -o SendEnv=IMAGE_NAME \
                            -o SendEnv=IMAGE_TAG \
                            -o SendEnv=DOCKERHUB_AUTH_USR \
                            -o SendEnv=DOCKERHUB_AUTH_PSW \
                            -C "${command1} && ${command2} && ${command3} && ${command4}"
                    '''
                }
            }
        }
        
        stage ('Deploy in PROD') {
            agent any
            when {
                expression { GIT_BRANCH == 'origin/master' }
            }
            environment { HOSTNAME_DEPLOY_PROD = '3.81.150.168' }            
            steps {
                sshagent(credentials: ['SSH_AUTH_SERVER']) {
                    sh '''
                        [ -d ~/.ssh ] || mkdir ~/.ssh && chmod 0700 ~/.ssh
                        ssh-keyscan -t rsa,dsa ${HOSTNAME_DEPLOY_PROD} >> ~/.ssh/known_hosts
                        command1="echo ${DOCKERHUB_PASSWORD_PSW} docker login -u ${DOCKERHUB_AUTH_USR} --password-stdin"
                        command2="docker pull ${DOCKERHUB_AUTH_USR}/${IMAGE_NAME}:${IMAGE_TAG}"
                        command3="dokcer rm -f ${IMAGE_NAME} || echo 'app does not exist'"
                        command4="docker run -d -p 80:5000 -e PORT=5000 --name ${IMAGE_NAME} ${IMAGE_NAME}:${IMAGE_TAG}"
                        ssh -t centos@${HOSTNAME_DEPLOY_PROD} \
                            -o SendEnv=IMAGE_NAME \
                            -o SendEnv=IMAGE_TAG \
                            -o SendEnv=DOCKERHUB_AUTH_USR \
                            -o SendEnv=DOCKERHUB_AUTH_PSW \
                            -C "${command1} && ${command2} && ${command3} && ${command4}"
                    '''
                }
            }
        }                
    }

}

  posts {

  }
